Ticket Title: Streamline UI & Input Handling

Context:
The current input handling system uses an InputHandler and a separate route_event function to funnel events to various parts of the application (tools, renderer, etc.). This abstraction leads to duplicated logic and multiple layers of state updates (e.g. handling transient states like drag/resize flags in both the tool and main app). It complicates the event flow, making it hard to track user actions and resulting state changes, and increases coupling between modules.

Goal:
Simplify the event handling by consolidating input processing within the main update loop and delegating directly to the active tool, thus reducing cross-module communication. The aim is to have a clear, linear flow from user input to tool-specific handling and command generation, with transient state managed locally within each tool.

Sub-Tasks:
	1.	Audit Current Input Flow:
	•	Review the existing InputHandler and route_event functions to understand all the event types processed (mouse clicks, drags, keyboard events).
	•	Identify where transient UI state (e.g., resize/drag flags) is stored and updated across modules.
	2.	Redesign Event Processing Flow:
	•	Propose a new, streamlined input handling flow where the main update loop directly queries egui for input events.
	•	Delegate events to the active tool’s methods (e.g., on_pointer_down, on_pointer_move, on_pointer_up) to encapsulate interaction logic within the tool itself.
	•	Remove redundant event routing layers and centralize transient state (e.g., drag/resizing) within the active tool.
	3.	Implement Refactored Input Handling:
	•	Remove or refactor the existing InputHandler and route_event so that the main update loop or tool UI callbacks process input directly.
	•	Adjust tools to manage their own transient state (for example, when a drag begins, the active tool records its own state and produces a final command when finished).
	•	Update the UI code to reflect this new flow, ensuring that event-to-command transitions are clear and localized.
	4.	Integration & Testing:
	•	Update integration tests to ensure that all UI interactions (e.g., tool activation, drawing, selection, resizing) trigger the expected behavior without the old routing overhead.
	•	Confirm that transient states (like resize preview) are maintained locally in the tool and that the main app no longer needs to track multiple flags.
	5.	Documentation & Cleanup:
	•	Document the new event handling flow in developer guides and inline comments, explaining how input events are now processed.
	•	Remove deprecated code from the old InputHandler and route_event implementations.

Acceptance Criteria:
	•	Direct Input Delegation: The main update loop directly retrieves and processes input events (via egui) and passes them to the active tool without extra routing layers.
	•	Localized Transient State: Transient states (e.g., drag, resize) are managed within the active tool, reducing cross-module state updates.
	•	Simplified Flow: The removal of the separate InputHandler and route_event functions results in a more linear and understandable event-to-command flow.
	•	Consistent Behavior: UI interactions (e.g., dragging to resize, drawing strokes) work as expected, with undo/redo functionality intact.
	•	Test Coverage: All relevant unit and integration tests pass, verifying that input events correctly trigger tool actions and command execution.
	•	Documentation Updated: Developer documentation reflects the new input handling structure and clearly outlines responsibilities.

Additional Notes:
	•	This refactor should be designed to ease future modifications, particularly as the application evolves towards a graph-based, non-destructive command system.
	•	Ensure that the refactored design doesn’t compromise immediate responsiveness, especially for transient UI updates during interactions.
	•	Review the changes with the team to confirm that the new approach improves clarity and maintainability without introducing regressions.