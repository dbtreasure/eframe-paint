Ticket Title: Consolidate Document and EditorState into Unified Application State

Context:
Our current state management splits core editing data across separate modules—Document (holding elements, versioning) and EditorState (tracking active tool, selection IDs, etc.). This leads to duplicated versioning, scattered selection state, and extra coordination logic between modules. It complicates future changes (like supporting non-destructive, graph-based editing) and increases cognitive overhead during development.

Goal:
Merge Document and EditorState (or refactor them into a single unified state) to create a single source of truth for all editable content and UI state. This consolidation will simplify state synchronization, reduce duplicate logic, and make the code easier to extend.

Sub-Tasks:
	1.	State Audit & Design:
	•	Review all usages of Document and EditorState across the codebase.
	•	Define a unified state structure (e.g., EditorModel) that includes:
        •	Content (elements: strokes, images, etc.)
        •	Versioning (document version)
        •	Selection (set of selected element IDs)
        •	Active tool (current tool mode or reference)
	•	Determine which parts of the current state are purely UI (ephemeral) and which are content (undoable).
	2.	Data Structure Refactoring:
	•	Create a new state struct (EditorModel) to hold merged data.
	•	Migrate fields from Document and EditorState into EditorModel, removing duplicates (e.g., consolidate version counters, selection sets, active tool).
	•	Adjust methods such as find_element_by_id and version checks to use the new state.
	3.	API & Flow Updates:
	•	Update functions in PaintApp (and related modules) to operate on the new unified state rather than juggling two structures.
	•	Remove redundant state updates (e.g., updating both Document and EditorState on tool changes or selection updates).
	•	Refactor event routing and command execution to reference the unified state.
	4.	Testing & Rollout:
	•	Write unit tests for the new unified state functionality (e.g., ensuring selection updates, tool switches, and version increments work as expected).
	•	Verify that undo/redo behavior remains consistent after the refactor.
	•	Update UI tests to confirm that changes in active tool and document modifications are handled correctly.
	5.	Documentation & Cleanup:
	•	Document the new unified state structure, outlining which responsibilities now reside in the merged module.
	•	Remove now-obsolete code and update any inline comments referencing the old separation between Document and EditorState.

Acceptance Criteria:
	•	A new unified state (e.g., EditorModel) exists, encapsulating document content, versioning, selection, and active tool.
	•	All references in the codebase to Document and EditorState are updated to use the new state structure.
	•	The application behaves identically regarding undo/redo, tool switching, and element manipulation.
	•	Tests for state management pass (unit and integration tests).
	•	Code review confirms that the state handling is simpler and easier to reason about, with a single source of truth for modifications.

Additional Notes:
	•	Evaluate if merging the two modules affects any performance-critical sections, and if so, document any necessary adjustments.
	•	Ensure the separation between document-editing commands and ephemeral UI state remains clear (only include non-transient data in the unified state).
	•	Consider the future requirement of a non-destructive, graph-based editing model; design the unified state so that it can later serve as a foundation for this change.


2nd Opinion from Gemini:

Okay, I've reviewed your colleague's notes in `todo/refactor/index.txt` and the state consolidation ticket in `todo/refactor/state-consolidation.txt`, and I concur with their assessment and recommendations. The current separation of `Document` and `EditorState` creates several issues:

*   **Duplicated State:** Both `Document` and `EditorState` track versions, and selection state is spread across multiple locations.
*   **Increased Complexity:** Maintaining consistency between the two states adds unnecessary complexity and cognitive overhead.
*   **Impeded Future Development:** The current structure makes it harder to implement features like non-destructive editing.

The proposed solution of consolidating the state into a unified `EditorModel` (or similar) is the correct approach. Here's a breakdown of why and a slightly more detailed analysis, building on your colleague's points:

**1. Why Consolidation is Necessary (Expanding on the Existing Notes):**

*   **Single Source of Truth:** The core principle is to have one place where the definitive state of the application resides. This eliminates the need to synchronize changes across multiple objects and reduces the risk of inconsistencies.  Any time you have to update *two* things to make *one* logical change, you introduce a risk of bugs.
*   **Simplified Logic:**  Operations like undo/redo, tool switching, and element manipulation become much simpler when they operate on a single state object.  You don't need to check two different version numbers or update selection in two places.
*   **Clearer Data Ownership:**  With a unified state, it's immediately obvious which part of the code is responsible for managing which data.  This improves maintainability and makes it easier for new developers to understand the codebase.
*   **Foundation for Non-Destructive Editing:**  A unified state is a prerequisite for implementing a non-destructive, graph-based editing model.  The `EditorModel` can serve as the basis for this future architecture.

**2. Detailed Analysis and Considerations (Beyond the Existing Ticket):**

*   **Ephemeral vs. Undoable State:**  The ticket correctly identifies the need to distinguish between UI-only (ephemeral) state and document content (undoable) state.  This is crucial.  The `EditorModel` should *only* contain data that needs to be part of the undo/redo history and that represents the actual document content.  Things like:
    *   **Undoable:** Element data (strokes, images, their properties), document version, element IDs.
    *   **Ephemeral (Potentially):**  Active tool, *current* selection (though selection *changes* might be undoable), zoom level, scroll position, UI panel states.  These *could* be part of the `EditorModel`, but carefully consider if they need to be. If they don't affect the *rendered output* of the document, they might be better kept separate.
*   **`EditorModel` Structure (Concrete Suggestions):**  The ticket mentions the key components. Here's a possible Rust struct outline (you'll need to adapt it to your specific codebase):

```rust
struct EditorModel {
    content: Vec<ElementType>, // Or a more specific element container
    version: usize,          // Single version counter
    selected_element_ids: HashSet<ElementId>, // Or a more specialized selection structure
    active_tool: ToolType,   // Enum representing the current tool
    // ... potentially other undoable state ...
}

// Separate struct for ephemeral UI state (if needed)
struct UIState {
    zoom_level: f32,
    scroll_position: (f32, f32),
    // ... other UI-related state ...
}
```

*   **Selection Handling:**  The notes correctly point out the duplication in selection state.  The `EditorModel` should own the *set of selected element IDs*.  The `SelectionTool` should *read* this set to determine what to display and *modify* it through methods on the `EditorModel` (or by dispatching commands that modify it).  The `SelectionTool` can still maintain its internal state (e.g., `Idle`, `Dragging`, `Resizing`), but this state should be considered *derived* from the core selection in `EditorModel`.
*   **Active Tool:**  The notes recommend simplifying the active tool handling.  An enum (`ToolType` in the example above) is an excellent way to represent the current tool.  You can store instances of each tool (to preserve their configuration) and switch between them by changing the `active_tool` field in `EditorModel`.  This avoids unnecessary cloning.
*   **Versioning:**  The `EditorModel` should have a *single* version counter.  Any change to the document content should increment this counter.  This counter can be used to trigger UI updates and to manage undo/redo.
*   **API Updates:**  The ticket mentions updating functions in `PaintApp`.  This is critical.  *Every* function that currently interacts with `Document` or `EditorState` will need to be updated to use the `EditorModel`.  This is a significant refactoring effort, but it's essential for achieving the benefits of state consolidation.
*   **Command Pattern:** The notes and other tickets mention the command pattern. This refactor to consolidate state is a *prerequisite* for improving the command pattern. Once you have a single `EditorModel`, your commands can operate on it directly, making them simpler and more self-contained.

**3. Steps to Implementation (Reinforcing the Ticket):**

1.  **Audit:**  Thoroughly review all code that uses `Document` and `EditorState`.  Understand exactly what data is stored in each and how it's used.  This is the most time-consuming but most important step.
2.  **Design:**  Create the `EditorModel` struct (as outlined above, adapted to your needs).  Carefully decide which fields belong in `EditorModel` and which (if any) belong in a separate `UIState` struct.
3.  **Refactor:**  Create the new `EditorModel` and start migrating fields from `Document` and `EditorState`.  This will likely involve significant code changes.  Do it incrementally, testing frequently.
4.  **API Changes:**  Update all functions to use `EditorModel`.  This is where you'll eliminate duplicated logic and simplify the code.
5.  **Testing:**  Write thorough unit and UI tests to ensure that the application behaves identically after the refactoring.  Pay close attention to undo/redo, tool switching, and element manipulation.
6.  **Cleanup:**  Remove the old `Document` and `EditorState` structs and any associated code.  Update comments and documentation.

In summary, I strongly agree with your colleague's assessment. State consolidation is a crucial first step towards improving the overall architecture of your application. The detailed analysis and steps above should provide a solid foundation for this refactoring effort. Remember to proceed incrementally, test thoroughly, and focus on creating a single source of truth for your application's state.

