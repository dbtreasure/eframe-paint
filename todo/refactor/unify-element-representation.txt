Ticket Title: Unify Element Representation for Strokes and Images

Context:
Currently, strokes and images are treated as separate entities with duplicated logic for rendering, hit-testing, command execution, and undo/redo. Although there's an existing ElementType enum that partially merges them, separate handling leads to redundant code and hinders future enhancements like layering or adding new element types. Unified element representation will simplify code maintenance and facilitate a more flexible, non-destructive command system.

Goal:
Merge strokes and images into a single, unified element representation with a common interface for operations (e.g., draw, move, resize, hit-test). This will eliminate duplicate logic and make it easier to extend support to additional element types in the future.

Sub-Tasks:
	1.	Audit & Consolidation:
	•	Review implementations in stroke.rs and image.rs.
	•	Identify common attributes (ID, position, bounding box) and behaviors (rendering, hit-testing, transformations).
	•	Design a unified structure (e.g., expanding the existing ElementType enum or introducing a trait for common behaviors).
	2.	API Redesign:
	•	Define a consistent API (via trait or unified methods) for operations like drawing, moving, and resizing.
	•	Refactor the Document module to store a single list (e.g., Vec<ElementType>) rather than separate lists for strokes and images.
	•	Update all related functions (e.g., element lookup, collision detection) to work with the unified representation.
	3.	Command & Renderer Integration:
	•	Modify command implementations (e.g., AddElement, ResizeElement, MoveElement) to operate on the unified element type.
	•	Update the Renderer to iterate over and draw elements from a unified list, handling differences internally as needed.
	4.	Testing & Validation:
	•	Write and update unit tests to verify that operations (drawing, moving, resizing, hit-testing) work uniformly for both former strokes and images.
	•	Run integration tests to ensure UI behavior, undo/redo functionality, and command processing remain consistent.
	5.	Documentation & Cleanup:
	•	Document the new unified element model and update any developer guides or in-code comments.
	•	Remove obsolete code paths and modules specific to handling strokes or images separately.

Acceptance Criteria:
	•	Unified Storage: The Document now maintains a single collection (e.g., Vec<ElementType>) for all drawable elements.
	•	Common API: All operations (draw, move, resize, hit-test) are accessible via a unified API, regardless of whether the element is a stroke or image.
	•	Command Consistency: Commands correctly operate on the unified element, with no duplicated logic between strokes and images, and undo/redo functionality remains intact.
	•	Test Pass: All unit and integration tests pass, and UI behavior is consistent with pre-refactor functionality.
	•	Documentation: The new design is well-documented, and obsolete code is removed.

Additional Notes:
	•	Evaluate potential performance impacts, ensuring that unifying elements does not degrade rendering or command processing.
	•	Ensure that any unique requirements (e.g., infinite resolution for vector strokes) are preserved, possibly by using specialized implementations within the unified type if necessary.
	•	Ownership and Single Source of Truth: As part of this refactoring, transition from reference-counted elements (Arc<Stroke>, Arc<Image>) to direct ownership by the EditorModel. The EditorModel should be the single source of truth for all element data, with other components accessing elements through references (&ElementType) rather than cloning or sharing ownership. This aligns with the "Remove Over-Engineering" refactoring goal and simplifies the mental model of where data lives and how it's modified.
		•	Replace StrokeRef (Arc<Stroke>) with direct Stroke ownership in the EditorModel
		•	Replace ImageRef (Arc<Image>) with direct Image ownership in the EditorModel
		•	Update Command variants to store owned elements rather than references
		•	Modify tools to transfer ownership of created elements to the EditorModel via commands
		•	Update rendering code to work with borrowed references (&ElementType) rather than cloned references
	•	Design the solution to be flexible enough to incorporate additional element types (such as text) with minimal further changes.